m2
#nrow
m2 <- matrix(data=c(1:9),nrow=3)
#nrow
m2 <- matrix(data=c(1:9),nrow=3)
m2
m2 <- matrix(data=c(1:9),nrow=9)
m2
x <- matrix(1:12,nrow=4,ncol=3,byrow=T)
x <- matrix(1:12, nrow=4, ncol=3, byrow=T)
x
dim(x)
# 1) scala(0) : 값이 하나 vs matrix(2)
0.5*x
y
# 2) vactor(1) vs matrix(2)
y <- 10:12
y
y + x
y <- 10:13
y + x
# 2) vactor(1) vs matrix(2)
y <- 10:12
y*x
# 3) matrix(2) vs matrix(2) : shape
x + x
x
x - x
x * x
#4) 전치행렬 : 행->열, 열->행
x
t(x)
t(x)
f(x)
# 3) 처리함수 : apply()
?apply
# 3) 처리함수 : apply()
help(apply)
# 3) 처리함수 : apply()
help(apply(array, margin, ...))
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
apply(x,1,sum)
x
x <- matrix(1:12, nrow=4, ncol=3, byrow=T)
x
apply(x,1,sum)
apply(x,2,mean)
# 1=행단위 2=열단위
apply(x,2,sum)
# 1=행단위 2=열단위
apply(x,1,sum)
apply(x,1,var)
apply(x,2,var) #행단위 분산
apply(x,1,sd) #행단위 표준편차
# 02. 다음 두 개의 벡터를 이용하여 단계별로 처리하시오.
v1 <- c(2,3,10,-5,8)
v2 <- c(40,50,-30,7,10)
# 단계1> 행 단위로 묶어서 matrix 생성하기
x <- matrix(cbind(v1,v2))
x
# 단계1> 행 단위로 묶어서 matrix 생성하기
x <- cbind(v1,v2)
x
t(x)
# 단계2> matrix 차원 보기
dim(x)
# 단계3> matrix 열 단위 합계 계산하기
apply(x,2,sum)
# 단계1> 행 단위로 묶어서 matrix 생성하기
x <- rbind(v1,v2)
# 단계2> matrix 차원 보기
dim(x)
# 단계3> matrix 열 단위 합계 계산하기
apply(x,2,sum)
?array
?array
# 1) 1차원 -> 3차원
arr <- array(data=c(1:12),dim=c(3,2,2))
arr
data()
iris3
dim(iris3)
#색인 index
arr[,,1]
arr
arr[1,,]
arr[,1,]
arr[1,1,]
arr[1,1,2]
iris3[10:20,1:2,1]
# (4) 전치행렬 : 행->열, 열->행
x
t(x)
no <- 1:3
name <- c('홍길동','이순신','유관순')
pay <- c(250,350,200)
emp <- data.frame(no,name,pay)
emp
emp <- data.frame(NO=no,NAME=name,PAY=pay)
emp
emp <- data.frame(번호=no,이름=name,급여=pay)
emp
dim(emp)
class(emp)
mode(emp)
mode(arr)
class(arr)
# 자료참조 : 칼럼명 참조 or index 참조
# 형식) object$column
emp$번호
# 자료참조 : 칼럼명 참조 or index 참조
# 형식) object$column
emp$급여
# 자료참조 : 칼럼명 참조 or index 참조
# 형식) object$column
emp$sum(급여)
# 자료참조 : 칼럼명 참조 or index 참조
# 형식) object$column
pay <- emp$급여
# 자료참조 : 칼럼명 참조 or index 참조
# 형식) object$column
pay <- emp$급여
sum(pay)
mean(pay)
# 형식2) object[row,column]
emp_row <- emp[c(1,3),]
emp
emp_row
# 2) csv(comma seperate value), text file
setwd('c:/IIIT/Rwork/Part-I')
# 2) csv(comma seperate value), text file
setwd('c:/IIIT/2_Rwork/Part-i')
# 2) csv(comma seperate value), text file
setwd('c:/IIIT/2_Rwork/Part-i')
# 2) csv(comma seperate value), text file
setwd('c:/IITT/2_Rwork/Part-i')
getwd()
emp_txt <- read.table()
emp_txt <- read.table('emp.txt')
emp_txt
emp_txt <- read.table('emp.txt',header=T, sep='')
emp_txt
class(emp_txt)
emp_csv <- read.csv('emp.csv')
emp_csv
class(emp_csv)
#[실습]
sid <- 1:3.5 #이산형
sid
sid <- 1:3 #이산형 : 정수로 이루어짐
score <- c(90,85,83) #연속형 : 실수도 포함가능
gender <- c('M','F','M') #범주형 : 카테고리 형성 가능
student <- data.frame(sid, score, gender)
student
# 자료구조 보기
str(student)
student <- data.frame(sid, score, gender, stringsAsFactors = T)
str(student)
student <- data.frame(sid, score, gender, stringsAsFactors = F)
# 자료구조 보기
str(student)
# 특정 칼럼 -> vector
score <- student$score
score
mean(score)
sum(score)
sid(score)
sd(score)
var(score)
sqrt(var(score))
name <-c("최민수","유관순", "이순신","김유신","홍길동")
age <-c(55,45,45,53,15) #연령
gender <-c(1,2,1,1,1) #1:남자, 2: 여자
job <-c("연예인","주부","군인","직장인","학생")
sat <-c(3,4,2,5,5) # 만족도
grade <- c("C","C","A","D","A")
total <-c(44.4,28.5,43.5,NA,27.1) #총구매금액(NA:결측치)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(name,age,gender,job,sat,grade,total)
user
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(total)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
plot(sat)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(name,age,gender,job,sat,grade,total,na.rm=T)
user
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(name,age,gender,job,sat,grade,total)
user
kor <- c(90,85,90)
eng <- c(70,85,75)
mat <- c(86,92,88)
kor <- c(90,85,90)
eng <- c(70,85,75)
mat <- c(86,92,88)
# 조건1) 3개의 과목점수를 이용하여 데이터프레임(Data)을 생성한다.
score <- data.frame(korea=kor, english=eng, math=mat)
str(score)
score
# 조건2) 행/열 방향으로 max()함수를 적용하여 최댓값 구하기
apply(score,1,max)
apply(score,2,max)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
apply(score,1,mean)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
r.m <- apply(score,1,mean)
round(r.m,2)
c.m <- apply(score,2,mean)
round(c.m,2)
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(score,1,var)
apply(score,2,var)
# 05. 다음의 Data2 객체를 대상으로 정규표현식을 적용하여 문자열을 처리하시오
Data2 <- c("2017-02-05 수입3000원","2017-02-06 수입4500원","2017-02-07 수입2500원")
library(stringr)
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(total)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
plot(sat)
# 1) key 생략 : [key=value, key2=value2 ~ ]
lst <- list('lee','이순신',35,'hong','홍길동',30)
lst
# 1) key 생략 : [key=value, key2=value2 ~ ]
lst <- list('lee','이순신',35,'hong','홍길동',30,nrow=2)
lst
# 1) key 생략 : [key=value, key2=value2 ~ ]
lst <- list('lee','이순신',35,'hong','홍길동',30,nrow=6)
lst
?list
pts <- list(x = cars[,1], y = cars[,2])
plot(pts)
is.pairlist(.Options)
vector("list", 5)
f <- function() x
f
formals(f) <- al <- alist(x = , y = 2+3, ... = )
f
al
e1 <- new.env()
e1$a <- 10
e1$b <- 20
as.list(e1)
# [[1]] -> 기본키(default key)
# [1] -> 'lee'
lst[1]
# [[1]] -> 기본키(default key)
# [1] -> 'lee'
lst[6] # key+value 같이 나옴
list[[5]]
lst[[5]]
lst2
# 2) key = value
lst2 <- list(first=1:5, second=6:10)
lst2
lst2$first
lst2$second
lst2$second[2:4]
# 3) 다양한 자료형
lst3 <- list(name=c('홍길동','유관순'),age=c(35,25),gender=c('m','f'))
lst3
mean(lst3$age)
mode(lst3)
class(lst3)
lst4 <- list(one = c ('one','two','three')
two = matrix (1:9, nrow=3)
three = array (1:12,c(2,3,2)))
lst4 <- list(one = c ('one','two','three') ,
two = matrix (1:9, nrow=3) ,
three = array (1:12,c(2,3,2)))
lst4
multi_list <- list(r1=list(1,2,3),
r2=list(10,20,30),
r3=list(100,200,300))
multi_list
# do.call(func, object)
mat <- do.call(rbind,multi_list)
mat
?do.call
# 6) list 처리 함수
x <- list(1:10) #key 생략
x
# 6) list 처리 함수
x <- list(1:10) #key 생략
x
#list -> vector
v <- unlist(x)
v
a;b
a <- list(1:5)
b <- list(6:10)
a;b
#lapply(x,function)
lapply(c(a,b),max)
sapply(c(a,b),max)
do.call("complex", list(imag = 1:3))
do.call("f", list(A))
x
score
avg <- mean(score)
avg <- mean(score,na.rm=T)
score <- c(90,85,83)
avg <- mean(score)
diff <- (score-avg)^2
diff
avg
score
VAR <- sum(diff) / (length(score)-1)
VAR
var(score)
sqrt(VAR)
sqrt(var(score))
letters
x <- 1:5
y <- 6:10
z <- letters[1:5]
df <- data.frame(x,y,z)
df
?subset
subset(x, subset, select, drop = FALSE, ...)
# 1) 조건식으로 subset 생성
subset(df, x>=2)
# 1) 조건식으로 subset 생성
subset(df, x>=2 ,y)
# 2) select로 subset 생성
subset(df,select=c(x,z))
# 2) select로 subset 생성
subset(df,y=10,select=c(x,z))
# 2) select로 subset 생성
subset(df,y=5,select=c(x,z))
# 2) select로 subset 생성
subset(df,y=5,select=c(x,z))
# 2) select로 subset 생성
subset(df,y<=8,select=c(x,z))
# 3) 조건식 + select
subset(df, x>=2 $ x<=4,select=c(x,z))
# 3) 조건식 + select
subset(df, x>=2 $ x<=4, select=c(x,z))
# 3) 조건식 + select
subset(df, x>=2 & x<=4, select=c(x,z))
#class(자료구조)는 모두 data.frame임
# 4) 특정 칼럼의 특정 값으로 subset 생성
subset(df,z %in% c('a','c','e'))
#class(자료구조)는 모두 data.frame임
# 4) 특정 칼럼의 특정 값으로 subset 생성
subset(df,z %in% c('a','c','e'), select=z)
# 1) 매트릭스 생성함수
# (1) matrix
#data
m1 <- matrix(data=c(1:5)) #행 :5, 열 :1
m1
m1 <- matrix(1:5)
matrix(1:5)
matrix(5:1)
m1 <- 1:5
m1
# 1) 매트릭스 생성함수
# (1) matrix
#data
m1 <- matrix(data=c(1:5)) #행 :5 열 :1
#byrow
m2 <- matrix(data=c(1:9),nrow=3,byrow=F) #열우선 : 세로축을 기준으로 숫자 배열
m2
m2 <- matrix(data=c(1:9),nrow=3,byrow=T) #행우선 : 가로축을 기준으로 숫자 배열
m2
#ncol 열의 갯수 설정
m2 <- matrix(data=c(1:9),ncol=3,byrow=T)
m2
m3 <- rbind(x,y)
m3
# (3) cbind : 변수를 열단위로 묶어줌
m4 <- cbind(x,y)
m4
m5 <- matrix(1:9,nrow=3,ncol=3)
m5
m5 <- matrix(1:9,nrow=3,ncol=3,byrow=T)
m5
#특정 행/열 색인
m5[1,] #
m5[,1]
m5[2:3,1:2] #
m5[1,2:3] # 4,7
m5[c(1,3),2:3] # 5,6/8,9
#(-)속성
m5[-2,] #2행 제거 # 1,2,3/7,8,9
m5[,-3] #3열 제거 # 1,2/4,5/7,8
#열/행 이름 지정하기 colnames() & rownames
colnames(m5) <- c('one','two','three')
m5
m5[,'one'] #열 이름을 사용할때는 한가지만 사용가능
rownames(m5) <- c('one','two','three')
m5
rownames(m5) <- c('one','two','three')
m5 <- matrix(1:9,nrow=3,ncol=3,byrow=T)
m5
rownames(m5) <- c('one','two','three')
m5
m5[,'one']
m5['one',] # 1,2,3
m5['two','one'] #
#열/행 이름 지정하기 colnames() & rownames
colnames(m5) <- c('one','two','three')
m5['two','one'] #4
x <- matrix(1:12, nrow=4, ncol=3, byrow=T)
dim(x)
# (1) scala(0) vs matrix(2)
0.5*x #x(matrix)의 모든 원소에 0.5가 곱해짐
# (2) vactor(1) vs matrix(2)
y <- 10:12
y + x
x
y
y - x
#vecot가 어떤 순서로 matrix가 되는지 확인해보기
y <- 10:13
y*x
#vecot가 어떤 순서로 matrix가 되는지 확인해보기
# - 백터와 메트릭스의 열의 갯수가 일치하지 않는 경우
y <- 10:13 #10,11,12,13
y + x
x
#vecot가 어떤 순서로 matrix가 되는지 확인해보기
# - 백터와 메트릭스의 열의 갯수가 일치하지 않는 경우
y <- 10:14 #10,11,12,13
y + x
#vector가 어떤 순서로 matrix가 되는지 확인해보기
y <- 10:15 #10,11,12,13,14,15
y + x
x
z <- matrix((y + x),byrow=T)
z
y + x
# (3) matrix(2) vs matrix(2) : shape
x + x
# 3) 처리함수 : apply()
help(apply)
# 1차원 -> 3차원
arr <- array(data=c(1:12),dim=c(3,2,2)) #dim=c(행,열,면)
arr #
class(arr)
# 1차원 -> 3차원
arr <- array(data=c(1:12),dim=c(3,2,2),byrow=T) #dim=c(행,열,면)
#색인 index
#변수[행,열,면]
arr[,,1] #1,2,3,4,5,6
# 3. Array 자료구조
# - 동일한 자료형을 갖는 3차원 배열구조
# - 생성 함수 : array()
?byrow
# 1차원 -> 3차원
arr <- array(data=c(1:12),dim=c(3,2,2),byrow=T) #dim=c(행,열,면)
# 1차원 -> 3차원
arr <- array(data=c(1:12),dim=c(3,2,2,byrow=T)) #dim=c(행,열,면)
arr
# 1차원 -> 3차원
arr <- array(data=c(1:12),byrow=T,dim=c(3,2,2)) #dim=c(행,열,면)
# 1차원 -> 3차원
arr <- array(data=c(1:12),c(3,2,2)) #dim=c(행,열,면)
arr
# 1차원 -> 3차원
arr <- array(1:12,c(3,2,2)) #dim=c(행,열,면)
arr
# 1차원 -> 3차원
arr <- array(1:12,c(3,2,2,byrow=T)) #dim=c(행,열,면)
arr
# 1차원 -> 3차원
arr <- array(1:12,c(3,2,2)) #dim=c(행,열,면)
arr
# 1차원 -> 3차원
arr <- array(1:12,c(3,2,2),byrow=T) #dim=c(행,열,면)
t(arr)
# 1차원 -> 3차원
?array
no <- 1:3
name <- c('홍길동','이순신','유관순')
pay <- c(250,350,200)
emp <- data.frame(번호=no,이름=name,급여=pay)
emp
# 자료참조 : 칼럼명 참조 or index 참조
# 형식1) object$column
# x$y : x(data.frame)에서 y칼럼을 가져오게하는 함수
pay <- emp$급여 #pay에 emp속 급여에 대한 원소들의 값이 부여됨
sum(pay)
mean(pay) #
# 형식2) object[row,column]
emp_row <- emp[c(1,3),] # -> emp[-2,]
emp_row
score
# [[1]] -> 기본키(default key)
# [1] -> 'lee'
lst[6] # key+value 같이 나옴
multi_list <- list(r1=list(1,2,3),
r2=list(10,20,30),
r3=list(100,200,300))
multi_list
list(1,2,3)
mat <- do.call(rbind,multi_list)
mat
# 6) list 처리 함수
x <- list(1:10) #key 생략
x
v <- unlist(x)
v #key가 사라짐
a <- list(1:5)
b <- list(6:10)
a;b
lapply(c(a,b),max)
sapply(c(a,b),max)
