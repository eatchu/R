#         pred
#       ham spam
# ham  1187    1
# spam  178   28
acc <- (1187+28)/nrow(test_sms)
acc
#        pred2
#       ham spam
# ham  1170   18
# spam  112   94
acc <- (1170+94)/nrow(test_sms)
acc
params <- c(0.001,0.01,0.1,1,10,100,1000)
length(params)
tune.svm(Species~.,data=training,
gamma=params, cost=prams)
tune.svm(Species~.,data=training,
gamma=params, cost=params)
tuning <- tune.svm(Species~.,data=training,
gamma=params, cost=params)
tuning
best_model <- svm(Species~.,data=training,
gamma=0.01, cost=10)
pred <- predict(best_model, testing)
table(testing$Species,pred)
best_model <- svm(Species~.,data=training,
gamma=0.01, cost=10)
pred <- predict(best_model, testing)
table(testing$Species,pred)
letterdata = read.csv(file.choose())
str(letterdata) # 'data.frame':	20000 obs. of  17 variables:
# 2. 데이터 셋 생성
set.seed(415)
idx = sample(1:nrow(letterdata), 0.7*nrow(letterdata))
training_letter = letterdata[idx, ]
testing_letter  = letterdata[-idx, ]
# 3. NA 제거
training_letter2 = na.omit(training_letter)
testing_letter2 = na.omit(testing_letter)
# 4. 분류모델 생성
model_letter <- svm(letter~., data = training_letter2)
# 5. 분류모델 평가
pred_letter <- predict(model_letter, testing_letter2)
# 혼돈 matrix
table(pred_letter, testing_letter2$letter)
re <- (pred_letter==testing_letter2$letter)
re
table(re)
5681/(319+5681)
prop.table(table(re))
# 1. 파일 가져오기
weatherAUS = read.csv(file.choose()) #weatherAUS.csv
weatherAUS = weatherAUS[ ,c(-1,-2, -22, -23)] # 칼럼 제외
str(weatherAUS)
# 3. 분류모델 생성 : kernel='radial'(cost,gamma), kernel='linear'(cost)
model_r <- svm(RainTomorrow~., data=weatherAUS)
model_l <- svm(RainTomorrow~., data=weatherAUS, kernel='linear')
# 3. 분류모델 생성 : kernel='radial'(cost,gamma), kernel='linear'(cost)
model_r <- svm(RainTomorrow~., data=training_w)
model_l <- svm(RainTomorrow~., data=training_w, kernel='linear')
# 2. 데이터 셋 생성
set.seed(415)
idx = sample(1:nrow(weatherAUS), 0.7*nrow(weatherAUS))
training_w = weatherAUS[idx, ]
testing_w  = weatherAUS[-idx, ]
# 3. 분류모델 생성 : kernel='radial'(cost,gamma), kernel='linear'(cost)
model_r <- svm(RainTomorrow~., data=training_w)
model_l <- svm(RainTomorrow~., data=training_w, kernel='linear')
# 4. 분류모델 평가
pred_r <- predict(model_r,testing_w)
pred_l <- predict(model_l,testing_w)
table(testing_w$RainTomorrow,pred_r)
testing_w$RainTomorrow,pred_r
table(testing_w$RainTomorrow,pred_r)
length(pred_r)
length(testing_w)
length(testing_w$RainTomorrow)
idx = sample(1:nrow(weatherAUS), 0.7*nrow(weatherAUS))
training_w = weatherAUS[idx, ]
testing_w  = weatherAUS[-idx, ]
length(training_w)
length(testing_w)
length(training_w$RainTomorrow)
length(testing_w$RainTomorrow)
# 3. 분류모델 생성 : kernel='radial'(cost,gamma), kernel='linear'(cost)
model_r <- svm(RainTomorrow~., data=training_w)
model_l <- svm(RainTomorrow~., data=training_w, kernel='linear')
# 4. 분류모델 평가
pred_r <- predict(model_r,testing_w)
pred_l <- predict(model_l,testing_w)
length(pred_r)
length(testing_w$RainTomorrow)
summary(pred_r)
summary(testing_w$RainTomorrow)
table(testing_w$RainTomorrow,pred_r,na.rm=TRUE)
summary(weatherAUS)
tun_w <- tune.svm(RainTomorrow~.,data=training_w,
gamma=params,cost=params)
library(e1071)
# 1. 파일 가져오기
weatherAUS = read.csv(file.choose()) #weatherAUS.csv
weatherAUS = weatherAUS[ ,c(-1,-2, -22, -23)] # 칼럼 제외
# 2. 데이터 셋 생성
set.seed(415)
# 문2) 문1에서 생성한 모델을 tuning하여 최적의 모델을 생성하시오.
tun_w <- tune.svm(RainTomorrow~.,data=training_w,
gamma=params,cost=params)
length(gender$GENDER=='남')
length(gender$GENDER=='여')
gender$GENDER=='여'
gender %>% filter(gender$GENDER=='남') %>% group_by(BRAND) %>% summarise(man=n()/768817*100)
library(lattice)
library(ggplot2)
library(dplyr)
gender %>% filter(gender$GENDER=='남') %>% group_by(BRAND) %>% summarise(man=n()/768817*100)
gender %>% filter(gender$GENDER=='여') %>% group_by(BRAND) %>% summarise(women=n()/262538*100)
gender %>% filter(gender$GENDER=='남')
mpercent <- filter(gender$GENDER=='남')
# table join
customer_train <- read.csv(file.choose())
meal_train <- read.csv(file.choose())
customer_meal <- merge(meal_train,customer_train,by='CUSTOMER_ID')
gender <- customer_meal %>% select(BRAND,GENDER,QUANTITY)
mpercent <- filter(gender,gender$GENDER=='남')
mpercent
mg <- group_by(mpercent,BRAND)
m <- summarise(mg,man=n()/nrow(GENDER)*100)
m <- summarise(mg,n()/nrow(GENDER)*100)
m <- summarise(mg,n()/768817*100)
m <- summarise(mg,n()/nrow(mpercent$QUANTITY)*100)
m <- summarise(mg,n()/sum(mpercent$QUANTITY)*100)
m
mpercen <- gender %>% filter(gender$GENDER=='남') %>% group_by(BRAND) %>% summarise(man=n()/768817*100)
mpercen
mpercent <- gender %>% filter(gender$GENDER=='남') %>% group_by(BRAND) %>% summarise(man=n()/768817*100)
fpercent <- gender %>% filter(gender$GENDER=='여') %>% group_by(BRAND) %>% summarise(women=n()/262538*100)
percent <- merge(mpercent,fpercent,by='BRAND')
percent$man <- round(percent$man,2)
percent$women <- round(percent$women,2)
percent
percent <- melt(percent,id='BRNAD')
library(reshape2)
percent <- melt(percent,id='BRNAD')
percent <- melt(percent,id='BRAND')
percent
ggplot(data=percent, aes(x=BRAND,y=value,fill=variable))+geom_col(position='dodge')
histogram(~variable | factor(BRAND), data=percent , col=rainbow(2),
auto.key=TRUE)
labm <- paste(percent$BRAND, "\n", percent$variable[1:13], "%")
labm
labm <- paste(percent$BRAND, "\n", percent$value[1:13], "%")
labm
labm <- paste(percent$BRAND[1:13], "\n", percent$value[1:13], "%")
labm
labm <- paste(percent$BRAND[1:13], "\n", percent$value[1:13], "%")
pie(percent$value[1:13], labels=labm,
main='남성의 브랜드별 취식 비율')
par(mfrow=c(1,2))
par(mfrow=c(1,2))
labm <- paste(percent$BRAND[1:13], "\n", percent$value[1:13], "%")
pie(percent$value[1:13], labels=labm,
main='남성의 브랜드별 취식 비율')
labf <- paste(percent$BRAND[14:26], "\n", percent$value[14:26], "%")
pie(percent$value[14:26], labels=labf,
main='여성의 브랜드별 취식 비율')
str(customer_meal)
age <- customer_meal %>% select(BIRTH_YEAR,BRAND,QUANTITY)
range(age$BIRTH_YEAR) #1952 1997 : 69~24
table(age$BIRTH_YEAR)
age$age <- 2019 - customer_meal$BIRTH_YEAR + 1
range(age$age)
age$age2[age$BIRTH_YEAR>=1952&age$BIRTH_YEAR<=1969] <- '50~60년대생'
age$age2[age$BIRTH_YEAR>=1970&age$BIRTH_YEAR<=1979] <- '70년대생'
age$age2[age$BIRTH_YEAR>=1980&age$BIRTH_YEAR<=1989] <- '80년대생'
age$age2[age$BIRTH_YEAR>=1990&age$BIRTH_YEAR<=1997] <- '90년대생'
str(age)
table(age$age2)
str(age)
# 50~60년대생    70년대생    80년대생    90년대생
# 143385      403921      426191       49976
143385+403921+426191+49976
percent1 <- age %>% filter(age$age2=='50~60년대생') %>% group_by(BRAND) %>% summarise('50~60년대생'=n()/143385*100)
percent2 <- age %>% filter(age$age2=='70년대생') %>% group_by(BRAND) %>% summarise('70년대생'=n()/403921*100)
percent1 <- age %>% filter(age2=='50~60년대생') %>% group_by(BRAND) %>% summarise('50~60년대생'=n()/143385*100)
percent2 <- age %>% filter(age2=='70년대생') %>% group_by(BRAND) %>% summarise('70년대생'=n()/403921*100)
percent3 <- age %>% filter(age2=='80년대생') %>% group_by(BRAND) %>% summarise('80년대생'=n()/426191*100)
percent4 <- age %>% filter(age2=='90년대생 ') %>% group_by(BRAND) %>% summarise('90년대생 '=n()/49976*100)
percent4 <- age %>% filter(age2=='90년대생') %>% group_by(BRAND) %>% summarise('90년대생 '=n()/49976*100)
agepercent <- data.frame(percent1,percent2,percent3,percent4)
agepercent
agepercent <- melt(agepercent,id='BRAND')
agepercent
agepercent <- merge(percent1,percent2,percent3,percent4,by='BRAND')
agepercent
agepercent <- merge(percent1,percent2,percent3,percent4,by='BRAND')
percent4
percent3
agepercent <- merge(percent1,percent2,percent3,percent4,by='BRAND')
agepercent <- merge(percent1,percent2,percent3,percent4,by.all='BRAND')
agepercent <- data.frame(percent1,percent2$`70년대생`,percent3$`80년대생`,percent4$`90년대생 `)
agepercent
names(agepercent) <- c('BRAND','50~60','70','80','90')
agepercent
agepercent <- melt(agepercent,id='BRAND')
agepercent
names(agepercent) <- c('BRAND','AGE','VALUE')
ggplot(data=age, aes(x=BRAND,y=QUANTITY,fill=age2))+geom_col(position='dodge')
agepercent$VALUE <- round(agepercent$VALUE,2)
agepercent
ggplot(data=agepercent, aes(x=BRAND,y=VALUE,fill=AGE))+geom_col(position='dodge')
agepercent
library(ggplot2)
ggplot(data=agepercent, aes(x=BRAND,y=VALUE,fill=AGE))+geom_col(position='dodge')
str(agepercent)
ggplot(data=agepercent, aes(x=BRAND,y=VALUE,fill=AGE))+geom_col(position='dodge')
agepercent
str(agepercent)
qplot(AGE, data=agepercent, fill=BRAND)
names(agepercent) <- c('BRAND','50~60년대','70년대','80년대','90년대')
percent1 <- age %>% filter(age2=='50~60년대생') %>% group_by(BRAND) %>% summarise('50~60년대생'=n()/143385*100)
percent2 <- age %>% filter(age2=='70년대생') %>% group_by(BRAND) %>% summarise('70년대생'=n()/403921*100)
percent3 <- age %>% filter(age2=='80년대생') %>% group_by(BRAND) %>% summarise('80년대생'=n()/426191*100)
percent4 <- age %>% filter(age2=='90년대생') %>% group_by(BRAND) %>% summarise('90년대생 '=n()/49976*100)
agepercent <- data.frame(percent1,percent2$`70년대생`,percent3$`80년대생`,percent4$`90년대생 `)
names(agepercent) <- c('BRAND','50~60년대','70년대','80년대','90년대')
agepercent <- melt(agepercent,id='BRAND')
names(agepercent) <- c('BRAND','AGE','VALUE')
agepercent$VALUE <- round(agepercent$VALUE,2)
str(agepercent)
ggplot(data=agepercent, aes(x=BRAND,y=VALUE,fill=AGE))+geom_col(position='dodge')
qplot(AGE, data=agepercent, fill=BRAND)
p<- ggplot(agepercent, aes(BRAND))
p+geom_bar(aes(fill=age2), position="fill")
p<- ggplot(agepercent, aes(BRAND))
p+geom_bar(aes(fill=AGE), position="fill")
str(customer_meal)
customer_meal %>% group_by(GENDER) %>% summarise(mean(PRICE))
customer_meal %>% group_by(BRAND) %>% summarise(mean(PRICE))
customer_meal %>% group_by(BRAND) %>% summarise(sum(PRICE))
customer_meal %>% group_by(GENDER) %>% summarise(mean(PRICE))
head(customer_meal,30)
head(customer_meal,30)
head(random(customer_meal,30))
sample(customer_meal,30)
customer_meal %>% group_by(CUSTOMER_ID) %>% summarise(sum(PRICE))
customer_meal %>% group_by(CUSTOMER_ID) %>% summarise(sum(PRICE)) %>% select(BIRTH_YEAR)
customer_meal %>% group_by(CUSTOMER_ID) %>% select(BIRTH_YEAR) %>% summarise(sum(PRICE))
customer_meal %>% group_by(CUSTOMER_ID) %>% select(BIRTH_YEAR,PRICE) %>% summarise(sum(PRICE))
customer_meal %>% select(BIRTH_YEAR,PRICE,CUSTOMER_ID) %>% group_by(CUSTOMER_ID) %>% summarise(sum(PRICE))
customer_meal %>% group_by(CUSTOMER_ID) %>% summarise(sum(PRICE),select(PRICE,BIRTH_YEAR))
customer_meal %>% group_by(CUSTOMER_ID) %>% summarise(select(PRICE,BIRTH_YEAR))
customer_meal %>% group_by(CUSTOMER_ID) %>% summarise(select(PRICE,BIRTH_YEAR))
gid <- group_by(customer_meal,CUSTOMER_ID)
summarise(gid,sum(PRICE))
summarise(gid,sum(PRICE),length)
summarise(gid,sum(PRICE),GENDER)
summarise(gid,sum(PRICE),length(GENDER))
summarise(gid,sum(PRICE),unique(GENDER))
summarise(gid,sum(PRICE),unique(BIRTH_YEAR))
new <- summarise(gid,sum(PRICE),unique(BIRTH_YEAR))
length(unique(customer_meal$BIRTH_YEAR))
length(unique(customer_meal$CUSTOMER_ID))
length(new)
length(new$CUSTOMER_ID)
length(unique(new$`unique(BIRTH_YEAR)`))
new <- summarise(gid,price=sum(PRICE),year=unique(BIRTH_YEAR))
new
gy <- group_by(new,year)
summarise(gy,max(price))
new2 <- summarise(gy,max(price))
new2 <- summarise(gy,price=max(price))
new2
new2$age <- 2019 - new$year + 1
new2 <- as.data.frame(new2)
new2$age <- 2019 - new$year + 1
new2 <- as.data.frame(new2)
new2
customer_meal$age2[customer_meal$BIRTH_YEAR>=1952&age$BIRTH_YEAR<=1969] <- '50~60년대생'
customer_meal$age2[customer_meal$BIRTH_YEAR>=1970&age$BIRTH_YEAR<=1979] <- '70년대생'
customer_meal$age2[customer_meal$BIRTH_YEAR>=1980&age$BIRTH_YEAR<=1989] <- '80년대생'
customer_meal$age2[customer_meal$BIRTH_YEAR>=1990&age$BIRTH_YEAR<=1997] <- '90년대생'
id <- group_by(customer_meal,age2)
new <- summarise(id,sum=sum(QUANTITY))
new
prop.table(table(customer_meal$age2))
histogram(new)
new <- as.data.frame(new)
histogram(new)
plot(new)
barplot(new)
new <- as.vector(new)
new
str(new)
barplot(new)
name <- new$age2
value <- new$sum
names(valus) <- name
names(value) <- name
value
barplot(value)
par(mfrow=c(1,1))
barplot(value)
barplot(value, ylim=c(50000,450000))
barplot(value, ylim=c(50000,450000),col=rainbow(4))
prop.table(table(customer_meal$age2))
n <- c('50~60년대생 14%',' 70년대생 39%','80년대생 42%','90년대생 5%')
legend(20,70,
cex=1,
legend=n,
fill=rainbow(4))
legend(20,70,
cex=1,
legend=n,
fill=rainbow(4))
barplot(value, ylim=c(50000,450000),col=rainbow(4))
legend(20,70,
cex=1,
legend=n,
fill=rainbow(4))
legend(cex=1,
legend=n,
fill=rainbow(4))
barplot(value, ylim=c(50000,450000),col=rainbow(4),
legend.text = c('50~60년대생 14%',' 70년대생 39%','80년대생 42%','90년대생 5%'))
barplot(value, ylim=c(50000,450000),col=rainbow(4),
legend.text = c('50~60년대생 14%',' 70년대생 39%','80년대생 42%','90년대생 5%'),
main='연령대별 구내식당 이용횟수')
str(customer_meal)
gm <- group_by(customer_meal,MENU)
gm <- group_by(customer_meal,MENU,age2)
summarise(gm,sum(QUANTITY))
mp <- summarise(gm,sum(QUANTITY))
mp <- as.data.frame(mp)
mp
gm <- group_by(customer_meal,MENU,age2)
mp <- summarise(gm,sum=sum(QUANTITY))
mp <- as.data.frame(mp)
gm <- group_by(mp,MENU)
gm <- group_by(customer_meal,MENU,age2)
ggm <- group_by(mp,MENU)
summarise(ggm,max(sum))
summarise(ggm,max(sum),unique(age2))
summarise(ggm,max(sum),age2)
summarise(ggm,max(sum),count=age2)
summarise(ggm,max(sum),length(age2))
gm <- group_by(customer_meal,MENU,age2)
mp <- summarise(gm,mean=mean(QUANTITY))
mp
# (1) matrix 생성
x <- matrix(1:9, nrow=3, by=T)
x
dist <- dist(x, method="euclidean")
dist
# (3) 유클리드 거리 계산 식
# 관측대상 p와 q의 대응하는 변량값의 차의 제곱의 합에 sqrt 적용
sum((x[1,]-x[2,])**2)
# (3) 유클리드 거리 계산 식
# 관측대상 p와 q의 대응하는 변량값의 차의 제곱의 합에 sqrt 적용
sqrt(sum((x[1,]-x[2,])**2))
# (3) 유클리드 거리 계산 식
# 관측대상 p와 q의 대응하는 변량값의 차의 제곱의 합에 sqrt 적용
sqrt(sum((x[1,]-x[3,])**2))
sqrt(sum((x[2,]-x[3,])**2)) #
# (1) 군집분석(Clustering)분석을 위한 패키지 설치
install.packages("cluster") # hclust() : 계층적 클러스터 함수 제공
library(cluster) # 일반적으로 3~10개 그룹핑이 적정
# (2) 데이터 셋 생성
r <- runif(15, min = 1, max = 50)
x <- matrix(r, nrow=5, by=T)
x
dist <- dist(x, method="euclidean")
dist
# (4) 유클리드 거리 matrix를 이용한 클러스터링
hc <- hclust(dist) # 클러스터링 적용
hc
help(hclust)
plot(hc) # 클러스터 플로팅(Dendrogram) -> 1과2 군집(클러스터) 형성
#<실습> 중1학년 신체검사 결과 군집분석
#---------------------------------------------
body <- read.csv("c:/IITT/2_Rwork/Part-IV/bodycheck.csv")
names(body)
idist <- dist(body)
idist
body
hc <- hclust(idist)
plot(hc, hang=-1) # 음수값 제외
# 3개 그룹 선정, 선 색 지정
rect.hclust(hc, k=3, border="red") # 3개 그룹 선정, 선 색 지정
# 각 그룹별 서브셋 만들기
g1<- subset(body, 번호==15| 번호==1| 번호==4| 번호==8 | 번호==10)
g2<- subset(body, 번호==11| 번호==3| 번호==5| 번호==6 | 번호==14)
g3<- subset(body, 번호==2| 번호==9| 번호==7| 번호==12 | 번호==13)
# 1) 유클리드 거리 계산
idist<- dist(iris[1:4]) # dist(iris[, -5])
# 2) 계층형 군집분석(클러스터링)
hc <- hclust(idist)
hc
plot(hc, hang=-1)
rect.hclust(hc, k=3, border="red") # 3개 그룹수
# 3) 그룹수 만들기 : cutree()함수 -> 지정된 그룹수 만큼 자르기
# 형식) cutree(계층형군집결과, k=그룹수) -> 그룹수 만큼 자름
ghc<- cutree(hc, k=3) # stats 패키지 제공
ghc #  150개(그룹을 의미하는 숫자(1~3) 출력)
# 4) iris에서 ghc 컬럼 추가
iris$ghc <- ghc
table(iris$ghc) # ghc 빈도수
head(iris,60) # ghc 칼럼 확인
# 5) 그룹별 요약통계량 구하기
g1 <- subset(iris, ghc==1)
summary(g1[1:4])
g2 <- subset(iris, ghc==2)
summary(g2[1:4])
g3 <- subset(iris, ghc==3)
summary(g3[1:4])
iris[1:4]
x <- iris[1:4] # 4개변수 전체
dist <- dist(x, method="euclidean")
#단계2. 계층형 군집분석(클러스터링)
hc <- hclust(dist)
#단계3. 분류결과를 대상으로 음수값을 제거하여 덴드로그램 시각화
plot(hc)
#단계4. 그룹수를 4개로 지정하고 그룹별로 테두리 표시
rect.hclust(hc, k=3, border="red")
#단계4. 그룹수를 4개로 지정하고 그룹별로 테두리 표시
rect.hclust(hc, k=4, border="red")
#단계3. 분류결과를 대상으로 음수값을 제거하여 덴드로그램 시각화
(hc)
x <- iris[1:4] # 4개변수 전체
dist <- dist(x, method="euclidean")
#단계2. 계층형 군집분석(클러스터링)
hc <- hclust(dist)
#단계3. 분류결과를 대상으로 음수값을 제거하여 덴드로그램 시각화
plot(hc)
#단계4. 그룹수를 4개로 지정하고 그룹별로 테두리 표시
rect.hclust(hc, k=4, border="red")
# 1) data set 준비
library(ggplot2)
setwd("c:/IITT/2_Rwork/Part-IV")
sales <- read.csv("product_sales.csv", header=TRUE)
head(sales)
ghc <- cutree(hc,k=4)
table(ghc)
nrow(diamonds) # [1] 53940
t <- sample(nrow(diamonds),1000) # 1000개 셈플링
test <- diamonds[t, ] # 1000개 표본 추출
dim(test) # [1] 1000 10
head(test) # 검정 데이터
mydia <- test[c("price","carat", "depth", "table")] # 4개 칼럼만 선정
head(mydia)
result <- hclust(dist(mydia), method="average")
result
plot(result, hang=-1) # hang : -1 이하 값 제거
result2 <- kmeans(mydia, 3)
result2
names(result2) # cluster 칼럼 확인
result2$cluster # 각 케이스에 대한 소속 군집수(1,2,3)
# 4) 원형데이터에 군집수 추가
mydia$cluster <- result2$cluster
head(mydia) # cluster 칼럼 확인
# 5) 변수 간의 상관성 보기
plot(mydia[,-5])
cor(mydia[,-5], method="pearson") # 상관계수 보기
table(result2$cluster)
result2$centers
cor(mydia[,-5], method="pearson") # 상관계수 보기
# 6) 비계층적 군집시각화
plot(mydia$carat, mydia$price)
plot(mydia$carat, mydia$price, col=mydia$cluster)
# 중심점 표시 추가
result2$centers # Cluster means 값을 갖는 컬럼
# 각 그룹의 중심점에 포인트 추가
points(result2$centers[,c("carat", "price")], col=c(3,1,2), pch=8, cex=5)
head(sales)
# 단계1: 비계층적 군집분석 : 3개 군집으로 군집화
result2 <- kmeans(sales, 3)
result2
# 단계2: 원형데이터에 군집수 추가
mydia$cluster <- result2$cluster
# 단계2: 원형데이터에 군집수 추가
sales$cluster <- result2$cluster
head(sales)
# 4) 원형데이터에 군집수 추가
mydia$cluster <- result2$cluster
head(mydia) # cluster 칼럼 확인
# 단계3 : tot_price 변수와 가장 상관계수가 높은 변수와 군집분석 시각화
cor(sales[,-5], method="pearson")
plot(sales$visit_count, sales$avg_price, col=sales$cluster)
# 단계4. 군집의 중심점 표시
result2$centers
points(result2$centers[,c("visit_count", "avg_price")], col=c(3,1,2), pch=8, cex=5)
plot(sales$tot_price, sales$avg_price, col=sales$cluster)
points(result2$centers[,c("tot_price", "avg_price")], col=c(3,1,2), pch=8, cex=5)
install.packages('NbClust')
library(NbClust)
iris_max <- as.matrix(iris[-5])
iris_max
?NbClust
NbClust(iris_max, distance = "euclidean", min.nc = 2, max.nc = 15,
method="complete")
nc <- NbClust(iris_max, distance = "euclidean", min.nc = 2, max.nc = 15,
method="complete")
nc
nc <- NbClust(data=iris_max, distance = "euclidean", min.nc = 2, max.nc = 15,
method="complete")
nc
iris
iris_max <- as.matrix(iris[-c(5,6)])
nc <- NbClust(data=iris_max, distance = "euclidean", min.nc = 2, max.nc = 15,
method="complete")
nc
names(nc)
table(nc$Best.nc[1,])
