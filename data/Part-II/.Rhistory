main='버지니아 사망비율',
col=rainbow(4))
barplot(chart_data, ylim=c(0,600),
ylab="매출액(단위:만워)", xlab="년도별분기현황",
col=rainbow(8), main ="2014년도 vs 2015년도 분기별 매출현황 비교")
par(mfrow=c(1,1)) #1행1열로 그래프 다시 한개만 보임
# beside=T : 개별형 데이터
barplot(VADeaths,beside=T,horiz=F,
main='버지니아 사망비율',
col=rainbow(4))
# 범례추가
legend(x=1,y=300,
legend=col_names,
col=rainbow(4))
legend(x=1,y=300,
legend=col_names,
fill=rainbow(4))
# 범례추가
legend(x=1,y=300,
legend=row_names,
fill=rainbow(4))
# 범례추가
legend(x=4,y=200,
legend=row_names,
fill=rainbow(4))
legend(x=4,y=200,
legend=row_names,
fill=rainbow(4))
# 미적 객체 생성
obj <- ggplot(data=new_data,
aes(x=job2,fill=age2))
# 막대 차트 추가
obj + geom_bar()
# 고급 시각화
# 직업유형(범주형) vs 나이(범주형)
library(ggplot2)
# 미적 객체 생성
obj <- ggplot(data=new_data,
aes(x=job2,fill=age2))
new_data <- read.csv('new_data.csv',header=T)
setwd('C:/IITT/2_Rwork/Part-II')
new_data <- read.csv('new_data.csv',header=T)
# 미적 객체 생성
obj <- ggplot(data=new_data,
aes(x=job2,fill=age2))
# 막대 차트 추가
obj + geom_bar()
# 2) 숫자형(비율/등간) vs 범주형(명목/서열)
# - 방법 : boxplot, 카테고리별 통계
install.packages('lattice')
library(lattice) # 격자
# 나이(비율) vs 직업유형(명목)
densityplot(~ age,groups=job2, #격자내에 그룹을 설정
data=new_data, #선택할 데이터 자료
plot.points=T,
auto.key=T) #범례 추가
# 3) 숫자형(비율) vs 범주형(명목) vs 범주형(명목)
# - 기준컬럼은 숫자형이 되어야함
# 형식) densityplot(~x(기준 숫자형)|factor(범주형),groups=그래프범주형)
#(1) 구매금액을 성별과 직급으로 분류
densityplot(~price|factor(gender2), #기준이 되는 컬럼|범주의 수만큼 격자(칸)생성
groups=position2, #각 격자내에 그룹 생성
data=new_data,
auto.key = T)
#(2) 구매금액을 직급과 성별로 분류
densityplot(~price|factor(position2),
groups=gender2,
data=new_data,
auto.key = T)
#(1) 숫자형(age) vs 숫자형(price)
# 두개의 숫자형 컬럼의 관계 알아보기
cor(new_data$age,new_data$price) #결측치 있으면 값이 안나옴
new_data2 <- na.omit(new_data) #결측치 제거
cor(new_data2$age,new_data2$price) #0.0881251
# 0.0881251 : +-0.3~0.4 이상
plot(new_data2$age,new_data2$price)
#(2) 숫자형 vs 숫자형 vs 범주형
#형식) xyplot(y(숫자형) ~ x(숫자형|factor(범주형))
xyplot(price~age|factor(gender2),
data=new_data)
########################################
####교차테이블에 NA값 유무 확인하기#####
########################################
table(new_data$job2,new_data$age2,useNA='ifany')
#테이블 조회 : 문자열 유용
table(is.na(dataset$price)) #특정 컬럼
#테이블 조회 : 문자열 유용
table(is.na(new_data$age)) #특정 컬럼
#테이블 조회 : 문자열 유용
table(!is.na(new_data$age)) #특정 컬럼
# FALSE  TRUE  T값이 결측치
# 217    14
table(new_data$job2,new_data$age2,useNA='ifany')
library(lattice)
library(mlmRev)
data(Chem97)
# 1)histogram(~x축, dataframe)
histogram(~gcsescore, data=Chem97)
histogram(~gcsescore | score, data=Chem97) # score 단위
histogram(~gcsescore | factor(score), data=Chem97) # score 요인 단위
table(Chem97$score)
table(Chem97$score,useNA='ifAny')
table(Chem97$score,useNA='ifany')
# 2.densityplot(~x축 | 조건, dataframe, groups=변수)
densityplot(~gcsescore | factor(score), data=Chem97,
groups = gender, plot.points=T, auto.key = T)
table(VADeaths)
# matrix -> data.table 변환
dft <- as.data.frame(table(VADeaths))
dft
# 3.barchart(y~x | 조건, dataframe, layout)
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(4,1))
VADeaths
# matrix -> data.table 변환
dft <- as.data.frame.table(VADeaths)
dft
# 3.barchart(y~x | 조건, dataframe, layout)
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(4,1))
# x축 0부터 시작
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(2,2), origin=0)
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(4,1), origin=0)
# x축 0부터 시작
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(2,2), origin=0)
# 4.dotplot(y~x | 조건 , dataframe, layout)
dotplot(Var1 ~ Freq | Var2 , dft)
# Var2변수 단위로 그룹화하여 점을 연결하여 플로팅
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o",
auto.key=list(space="right", points=T, lines=T))
# Var2변수 단위로 그룹화하여 점을 연결하여 플로팅
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o",
auto.key=list(space="left", points=T, lines=T))
# Var2변수 단위로 그룹화하여 점을 연결하여 플로팅
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o",
auto.key=list(space="left", points=F, lines=T))
# Var2변수 단위로 그룹화하여 점을 연결하여 플로팅
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o",
auto.key=list(space="left", points=F, lines=F))
# Var2변수 단위로 그룹화하여 점을 연결하여 플로팅
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o",
auto.key=list(space="left", points=T, lines=T))
# Var2변수 단위로 그룹화하여 점을 연결하여 플로팅
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o",
auto.key=list(space="right", points=T, lines=T))
# 5.xyplot(y축~x축| 조건, dataframe or list)
library(datasets)
str(airquality) # datasets의 airqulity 테이터셋 로드
airquality # Ozone Solar.R Wind Temp Month(5~9) Day
range(airquality$Ozone,na.rm=T)
range(airquality$Wind,na.rm=T)
# airquality의 Ozone(y),Wind(x) 산점도 플로팅
xyplot(Ozone ~ Wind, data=airquality)
boxplot(dataset$price)$stats #정상범주내의 상/하한값을 보여줌 : 굵은선
# Month(5~9)변수 기준으로 플로팅
xyplot(Ozone ~ Wind | Month, data=airquality) # 2행3컬럼
# default -> layout=c(3,2)
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
# default -> layout=c(3,2)
xyplot(Ozone ~ Wind | factor(Month), data=airquality, layout=c(5,1))
# airquality의 Ozone(y),Wind(x) 산점도 플로팅
xyplot(Ozone ~ Wind, data=airquality)
# default -> layout=c(3,2)
xyplot(Ozone ~ Wind | factor(Month), data=airquality, layout=c(5,1))
# lat, long, depth, mag, stations
range(quakes$stations)
str(quakes) # 'data.frame':  1000 obs. of  5 variables:
head(quakes)
# lat, long, depth, mag, stations
table(is.na(quakes))
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch=".")
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch="o")
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch="@")
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch="*")
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch="oo")
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch="^")
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch="o")
# 그래프를 변수에 저장
tplot<-xyplot(lat~long, data=quakes, pch=".")
tplot
# 그래프에 제목 추가
tplot2<-update(tplot,
main="1964년 이후 태평양에서 발생한 지진위치")
print(tplot2)
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch="o",
main='1946년 이후 태평양에서 발생한 지진위치치')
# depth 이산형 변수 리코딩
# 1. depth변수 범위
range(quakes$depth)# depth 범위
# 40 680
# 2. depth변수 리코딩 : 집단변수로 나누어줌
quakes$depth2[quakes$depth >=40 & quakes$depth <=150] <- 1
quakes$depth2[quakes$depth >=151 & quakes$depth <=250] <- 2
quakes$depth2[quakes$depth >=251 & quakes$depth <=350] <- 3
quakes$depth2[quakes$depth >=351 & quakes$depth <=450] <- 4
quakes$depth2[quakes$depth >=451 & quakes$depth <=550] <- 5
quakes$depth2[quakes$depth >=551 & quakes$depth <=680] <- 6
transform(quakes, depth2=factor(depth2))
# 리코딩된 수심(depth2)변수을 조건으로 산점도 그래프 그리기
convert <- transform(quakes, depth2=factor(depth2))
xyplot(lat~long | depth2, data=convert)
# 동일한 패널에 2개의 y축에 값을 표현
# xyplot(y1+y2 ~ x | 조건, data, type, layout)
str(airquality)
xyplot(Ozone + Solar.R ~ Wind | factor(Month), data=airquality,
col=c("blue","red"),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind + Temp | factor(Month), data=airquality,
col=c("blue","red"),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind + Temp | factor(Month), data=airquality,
col=rainbow(4),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind + Temp | factor(Month), data=airquality,
col=c('blue','red'),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind | factor(Month), data=airquality,
col=c('blue','red'),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind + Temp | factor(Month), data=airquality,
col=rainbow(4),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind + Temp | factor(Month), data=airquality,
col=rainbow(7),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind + Temp | factor(Month), data=airquality,
col=rainbow(6),layout=c(5,1))
xyplot(Ozone + Solar.R ~ Wind + Temp | factor(Month), data=airquality,
col=rainbow(4),layout=c(5,1))
# 기본 coplot(y~x | a, data, overlap=0.5, number=6, row=2)
# number : 조건의 사이 간격,
# overlap : 겹치는 구간(0.1~0.9:작을 수록  사이 간격이 적게 겹침)
# row : 패널 행수
coplot(lat~long | depth, data=quakes) # 2행3열, 0.5, 사이간격 6
coplot(lat~long | depth, data=quakes, overlap=0.1) # 겹치는 구간 : 0.1
coplot(lat~long | depth, data=quakes, number=5, row=1) # 사이간격 5, 1행 5열
coplot(lat~long | depth, data=quakes, number=5, row=1, panel=panel.smooth)
coplot(lat~long | depth, data=quakes, number=5, row=1,
col='blue',bar.bg=c(num='green')) # 패널과 조건 막대 색
View(gugudan)
# 기본 coplot(y~x | a, data, overlap=0.5, number=6, row=2)
# number : 격자의 갯수
# overlap : 겹치는 구간(0.1~0.9:작을 수록  사이 간격이 적게 겹침)
# row : 패널 행수
coplot(lat~long | depth, data=quakes) # 2행3열, 0.5, 사이간격 6
coplot(lat~long | depth, data=quakes, overlap=0.1) # 겹치는 구간 : 0.1
coplot(lat~long | depth, data=quakes, number=5, row=1) # 사이간격 5, 1행 5열
coplot(lat~long | depth, data=quakes, number=5, row=1, panel=panel.smooth)
coplot(lat~long | depth, data=quakes, number=5, row=1,
col='blue',bar.bg=c(num='green')) # 패널과 조건 막대 색
coplot(lat~long | depth, data=quakes, number=5, row=1, panel=panel.smooth)
coplot(lat~long | depth, data=quakes, number=4, row=1) # 사이간격 5, 1행 5열
coplot(lat~long | depth, data=quakes, number=4, overlap=0.2, row=1) # 사이간격 5, 1행 5열
# 7.cloud()
# 3차원(위도, 경도, 깊이) 산점도 그래프 플로팅
cloud(depth ~ lat * long , data=quakes,
zlim=rev(range(quakes$depth)),
xlab="경도", ylab="위도", zlab="깊이")
# 테두리 사이즈와 회전 속성을 추가하여 3차원 산점도 그래프 그리기
cloud(depth ~ lat * long , data=quakes,
zlim=rev(range(quakes$depth)),
panel.aspect=0.9,
screen=list(z=45,x=-25),
xlab="경도", ylab="위도", zlab="깊이")
# 7.cloud()
# 3차원(위도, 경도, 깊이) 산점도 그래프 플로팅
cloud(depth ~ lat * long , data=quakes,
zlim=rev(range(quakes$depth)),
xlab="경도", ylab="위도", zlab="깊이")
# 테두리 사이즈와 회전 속성을 추가하여 3차원 산점도 그래프 그리기
cloud(depth ~ lat * long , data=quakes,
zlim=rev(range(quakes$depth)),
panel.aspect=0.9,
screen=list(z=45,x=-25),
xlab="경도", ylab="위도", zlab="깊이")
# 7.cloud()
# 3차원(위도, 경도, 깊이) 산점도 그래프 플로팅
cloud(depth ~ lat * long , data=quakes,
zlim=rev(range(quakes$depth)),
xlab="경도", ylab="위도", zlab="깊이")
# 테두리 사이즈와 회전 속성을 추가하여 3차원 산점도 그래프 그리기
cloud(depth ~ lat * long , data=quakes,
zlim=rev(range(quakes$depth)),
panel.aspect=0.9,
screen=list(z=45,x=-25),
xlab="경도", ylab="위도", zlab="깊이")
#install.packages("ggplot2") # 패키지 설치
library(ggplot2)
data(mpg) # 데이터 셋 가져오기
str(mpg) # map 데이터 셋 구조 보기
head(mpg) # map 데이터 셋 내용 보기
summary(mpg) # 요약 통계량
table(mpg$drv) # 구동방식 빈도수
# 1. ggplot()함수
help(qplot)
library(help='ggplot2')
# (1) 1개 변수 대상 기본 - x축 기준 도수분포도
qplot(hwy, data=mpg)
str(mpg) # map 데이터 셋 구조 보기
# (1) 1개 변수 대상 기본 - x축 기준 도수분포도
qplot(hwy,ylab='수', data=mpg)
# (1) 1개 변수 대상 기본 - x축 기준 도수분포도
qplot(hwy, data=mpg)
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
# binwidth 옵션 : 도수 폭 지정 속성
qplot(hwy, data=mpg, fill=drv, binwidth=2) # binwidth 옵션 적용
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
# binwidth 옵션 : 도수 폭 지정 속성
qplot(hwy, data=mpg, fill=drv, binwidth=2) # binwidth 옵션 적용
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
# facets 옵션 : drv변수 값으로 열단위/행단위 패널 생성
qplot(hwy, data=mpg, fill=drv, facets=.~ drv, binwidth=2) # 열 단위 패널 생성
qplot(hwy, data=mpg, fill=drv, facets=drv~., binwidth=2) # 행 단위 패널 생성
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
range(mpg$hwy)
table(mpg$hwy)
max(mpg$hwy)
nrow(max(mpg$hwy))
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
# (1) 1개 변수 대상 기본 - x축 기준 도수분포도
qplot(hwy, data=mpg)
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv, ylab=c(0,100)) # fill 옵션 적용
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv, ylim=c(0,100)) # fill 옵션 적용
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv)) # fill 옵션 적용
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
# binwidth 옵션 : 도수 폭 지정 속성
qplot(hwy, data=mpg, fill=drv, binwidth=2) # binwidth 옵션 적용
# facets 옵션 : drv변수 값으로 열단위/행단위 패널 생성
qplot(hwy, data=mpg, fill=drv, facets=.~ drv, binwidth=2) # 열 단위 패널 생성
qplot(hwy, data=mpg, fill=drv, facets=drv~., binwidth=2) # 행 단위 패널 생성
# facets 옵션 : drv변수 값으로 열단위/행단위 패널 생성
qplot(hwy, data=mpg, fill=drv, facets=.~ drv, binwidth=2) # 열 단위 패널 생성
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
head(mpg) # map 데이터 셋 내용 보기
# (1) 1개 변수 대상 기본 - x축 기준 도수분포도
qplot(hwy, data=mpg)
# (2) 2변수 대상 기본 - 속이 꽉찬 점 모양과 점의 크기는 1를 갖는 산점도 그래프
qplot(displ, hwy, data=mpg)# mpg 데이터셋의 displ과 hwy변수 이용
# displ, hwy 변수 대상으로 drv변수값으로 색상 적용 산점도 그래프
qplot(displ, hwy, data=mpg, color=drv)
# (3) 색상, 크기, 모양 적용
### ggplot2 패키지 제공 데이터 셋
head(mtcars)
str(mtcars) # ggplot2에서 제공하는 데이터 셋
# displ, hwy 변수 대상으로 drv변수값으로 색상 적용 산점도 그래프
qplot(displ, hwy, data=mpg, color=drv)
qplot(wt, mpg, data=mtcars, color=factor(carb)) # 색상 적용
qplot(wt, mpg, data=mtcars, color=carb) # 색상 적용
qplot(wt, mpg, data=mtcars, color=carb)
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb)) # 크기 적용
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb), shape=factor(cyl))#모양 적용
mtcars$qsec
# (4) geom 속성
### ggplot2 패키지 제공 데이터 셋
head(diamonds)
str(diamonds)
# geom 속성 : 차트 유형, clarity변수 대상 cut변수로 색 채우기
qplot(clarity, data=diamonds, fill=cut, geom="bar") #geom="bar" : 막대차트
# qplot(wt, mpg, data=mtcars, size=qsec) # geom="point" : 산점도
qplot(wt, mpg, data=mtcars, size=qsec, geom="point")
# cyl 변수의 요인으로 point 크기 적용, carb 변수의 요인으로 포인트 색 적용
qplot(wt, mpg, data=mtcars, size=factor(cyl), color=factor(carb), geom="point")
# qsec변수로 포인트 크기 적용, cyl 변수의 요인으로 point 모양 적용
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb), shape=factor(cyl), geom="point")
# geom="line"
qplot(mpg, wt, data=mtcars, color=factor(cyl), geom="line")
# geom="smooth"
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"))
# geom 속성 : 차트 유형, clarity변수 대상 cut변수로 색 채우기
qplot(clarity, data=diamonds, fill=cut, geom="bar") #geom="bar" : 막대차트
# qplot(wt, mpg, data=mtcars, size=qsec) # geom="point" : 산점도
qplot(wt, mpg, data=mtcars, size=qsec, geom="point")
# cyl 변수의 요인으로 point 크기 적용, carb 변수의 요인으로 포인트 색 적용
qplot(wt, mpg, data=mtcars, size=factor(cyl), color=factor(carb), geom="point")
# qsec변수로 포인트 크기 적용, cyl 변수의 요인으로 point 모양 적용
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb), shape=factor(cyl), geom="point")
# geom="line"
qplot(mpg, wt, data=mtcars, color=factor(cyl), geom="line")
=
=
# geom="smooth"
qplot(wt, mpg, data=mtcars, geom = c("point", "smooth"))
# (1) aes(x,y,color) 옵션
# aes(x,y,color) 속성 = aesthetics : 미학
p<-ggplot(diamonds, aes(x=carat, y=price, color=cut))
p+geom_point()  # point 추가
# (1) aes(x,y,color) 옵션
# aes(x,y,color) 속성 = aesthetics : 미학
p<-ggplot(diamonds, aes(x=carat, y=price, color=cut))
p+geom_point()  # point 추가
# (2) geom_line() 레이어 추가
p+geom_line() # line 추가
p+geom_point()
p<-ggplot(diamonds, aes(x=carat, y=price, color=cut))
p+geom_point()
# (2) geom_line() 레이어 추가
p+geom_line() # line 추가
# (3) geom_point()함수  레이어 추가
p<- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p+geom_point()  # point 추가
# (4) geom_step() 레이어 추가
p+geom_step()  # step 추가
# (5) geom_bar() 레이어 추가
p<- ggplot(diamonds, aes(clarity))
p+geom_bar(aes(fill=cut), position="fill")  # bar 추가
p<-ggplot(diamonds, aes(carat, price, color=cut))
p+geom_point()  # point 추가
p+geom_point()
ggsave(file="C:/IITT/2_Rwork/output/diamond_price.pdf") # 가장 최근 그래프 저장
ggsave(file="C:/IITT/2_Rwork/output/diamond_price.jpg", dpi=72)
# 변수에 저장된 그래프 저장
p<- ggplot(diamonds, aes(clarity))
p<- p+geom_bar(aes(fill=cut), position="fill")  # bar 추가
p
ggsave(file="C:/IITT/2_Rwork/output/bar.png", plot=p, width=10, height=5)
head(airquality)
str(airquality)
plot(Wind,Oznoe|factor(Month))
# 4)dotplot(y~x | 조건 , dataframe, layout)
dotplot(Var1 ~ Freq | Var2 , dft)
plot(Wind,Oznoe|factor(Month),airquality)
plot(Wind,Oznoe|factor(Month),data=airquality)
# x축 0부터 시작 (origin : x축의 값을 어디부터 시작할것인지)
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(2,2), origin=0)
# 4)dotplot(y~x | 조건 , dataframe, layout)
dotplot(Var1 ~ Freq | Var2 , dft)
dotplot(Wind,Oznoe|factor(Month),data=airquality)
airquality$Wind
dotplot(Oznoe~Wind|factor(Month),data=airquality)
dotplot(Oznoe ~ Wind|factor(Month),data=airquality)
airquality
dotplot(Oznoe ~ Wind|factor(Month),data=airquality)
library(lattice)
dotplot(Oznoe ~ Wind|factor(Month),data=airquality)
dotplot(Oznoe ~ Wind | factor(Month),data=airquality)
str(airquality)
dotplot(Ozone ~ Wind | factor(Month),data=airquality)
xyplot(Ozone ~ Wind | factor(Month),data=airquality)
# 기본 coplot(y~x | a, data, overlap=0.5, number=6, row=2)
# number : 격자의 갯수
# overlap : 겹치는 구간(0.1~0.9:작을 수록  사이 간격이 적게 겹침)
# row : 패널 행수
coplot(lat~long | depth, data=quakes) # 2행3열, 0.5, 사이간격 6
coplot(Ozone ~ Wind | factor(Month),data=airquality)
coplot(Ozone ~ Wind | factor(Month),data=airquality,row=1,col='blue')
airquality$Month<-as.factor(airquality$Month)
class(airquality$Month)
air_df<-transform(airquality,Month=factor(Month))
xyplot(Ozone~Wind|Month,data=air_df)
xyplot(Ozone ~ Wind | factor(Month),data=airquality)
xyplot(Ozone~Wind|Month,data=air_df)
xyplot(Ozone ~ Wind | Month,data=airquality)
xyplot(Ozone ~ Wind | Month,data=airquality)
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
# binwidth 옵션 : 도수 폭 지정 속성
qplot(hwy, data=mpg, fill=drv, binwidth=2) # binwidth 옵션 적용
# binwidth 옵션 : 도수 폭 지정 속성
qplot(hwy, data=mpg, fill=drv, binwidth=1) # binwidth 옵션 적용
# binwidth 옵션 : 도수 폭 지정 속성
qplot(hwy, data=mpg, fill=drv, binwidth=3) # binwidth 옵션 적용
# binwidth 옵션 : 도수 폭 지정 속성
qplot(hwy, data=mpg, fill=drv, binwidth=2) # binwidth 옵션 적용
# 지도 관련 패키지 설치
install.packages("ggmap")
library(ggmap) # get_stamenmap()
library(ggplot2) # geom_point(), geom_text(), ggsave()
# 서울 : 위도(left), 경도(bottom) : 126.97797  37.56654  -> google 지도에서 검색
# 서울 중심 좌표 : 위도 중심 좌우(126.8 ~ 127.2), 경도 중심 하상(37.38~37.6)
seoul <- c(left = 126.77, bottom = 37.40,
right = 127.17, top = 37.70)
terrain
map <- get_stamenmap(seoul, zoom=12,  maptype='terrain')#'toner-2011')
map
ggmap(map) # maptype : terrain, watercolor
# 대구 중심 남쪽 대륙 지도 좌표 : 35.829355, 128.570088
# 대구 위도와 경도 기준으로 남한 대륙 지도
daegu <- c(left = 123.4423013, bottom = 32.8528306,
right = 131.601445, top = 38.8714354)
ggmap(daegu)
daegu <- get_stamenmap(seoul,zoom=12,maptype='watercolor')
ggmap(daegu)
daegu <- get_stamenmap(daegu,zoom=12,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=12,maptype='terrain')
daegu <- c(left = 123.4423013, bottom = 32.8528306,
right = 131.601445, top = 38.8714354)
daegu <- get_stamenmap(daegu,zoom=7,maptype='terrain')
ggmap(daegu)
daegu <- get_stamenmap(daegu,zoom=15,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=15,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=12,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=10,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=2,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=4,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=4,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=9,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=6,maptype='terrain')
daegu <- get_stamenmap(daegu,zoom=7,maptype='terrain')
map <- get_stamenmap(seoul, zoom=7,  maptype='terrain')#'toner-2011')
ggmap(map) # maptype : terrain, watercolor
map <- get_stamenmap(seoul, zoom=15,  maptype='terrain')#'toner-2011')
