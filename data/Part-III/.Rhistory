num
num <- 1:length(cusmax)
num
for(i in num){
cusmax[i]<-cusmax[i]+(13*(i-1))
}
head(cusmax)
brand<-cus[cusmax,2]
brand<-table(brand)
n <- names(brand)
b <- as.vector(brand)
names(b)<-n
barplot(b)
str(num)
num <- dcast(customer,CUSTOMER_ID~BRAND,sum)
num$sum <- apply(num[-1],1,sum)
range(num$sum) #1~791
str(num)
new <- subset(num,num$sum>=100)
str(new)
range(new$sum) #100~641
str(customer_meal)
cusb <- arrange(melt(new[-15],id='CUSTOMER_ID'),CUSTOMER_ID)
head(cusb,20)
str(cusb)
length(unique(cusb$CUSTOMER_ID))
g <- group_by(cusb,CUSTOMER_ID)
cusmax <- summarise(g,which.max(value))
cusmax <- cusmax$`which.max(value)`
head(cusmax)
length(cusmax)
for(i in num){
cusmax[i]<-cusmax[i]+(13*(i-1))
}
num <- 1:length(cusmax)
for(i in num){
cusmax[i]<-cusmax[i]+(13*(i-1))
}
brand<-cusb[cusmax,2]
brand<-table(brand)
n <- names(brand)
b <- as.vector(brand)
names(b)<-n
barplot(b)
pie(brand)
brand
sum(brand)
pct <- round((brand/sum(brand)*100),2)
pct
lab <- paste(names(brand),"\n", pct, "%")
pie(brand,labels=lab)
library(reshape2)
number <- dcast(customer,CUSTOMER_ID~BRAND,sum)
number$sum <- apply(num[-1],1,sum)
customer <- customer_meal[c(1,3,6)]
str(customer_meal)
customer <- customer_meal[c(1,3,6)] # 브랜드, QUANTITY, 사원번호
str(customer)
number <- dcast(customer,CUSTOMER_ID~BRAND,sum)
number$sum <- apply(num[-1],1,sum)
number$sum <- apply(number[-1],1,sum)
range(number$sum) #1~791
str(number)
cus <- arrange(melt(number[-15],id='CUSTOMER_ID'),CUSTOMER_ID)
head(cus,20)
length(cus$CUSTOMER_ID) #10570x13
length(unique(cus$CUSTOMER_ID)) #10570 전체사원의 수
g1 <- group_by(cus,CUSTOMER_ID)
cusmax1 <- summarise(g1,which.max(value))
cusmax1 <- cusmax1$`which.max(value)`
head(cusmax1)
length(cusmax1) #10570
#가장 많이 먹은 브랜드 행 번호 구하기
num1 <- 1:length(cusmax1)
for(i in num1){
cusmax1[i]<-cusmax1[i]+(13*(i-1))
}
head(cusmax1) # 최대 많이 먹은 브랜드의 행 번호
# 브랜드 이름 뽑아내기
brand1<-cus[cusmax1,2]
brand1<-table(brand1)
n1 <- names(brand1)
b1 <- as.vector(brand1)
names(b1)<-n1
barplot(b1)
new <- subset(number,number$sum>=100)
str(new)
range(new$sum) #100~791
cusb <- arrange(melt(new[-15],id='CUSTOMER_ID'),CUSTOMER_ID)
head(cusb,20)
cusb <- arrange(melt(new[-15],id='CUSTOMER_ID'),CUSTOMER_ID)
head(cusb,20)
str(cusb)
length(unique(cusb$CUSTOMER_ID)) #4191명
g2 <- group_by(cusb,CUSTOMER_ID)
cusmax2 <- summarise(g2,which.max(value))
cusmax2 <- cusmax2$`which.max(value)`
head(cusmax2)
length(cusmax2)
num2 <- 1:length(cusmax2)
for(i in num2){
cusmax2[i]<-cusmax2[i]+(13*(i-1))
}
brand2<-cusb[cusmax2,2]
brand2<-table(brand2)
n2 <- names(brand2)
b2 <- as.vector(brand2)
names(b2)<-n2
barplot(b2)
hist(b2)
par(mfrow=c(1,2))
pie(brand2,labels=lab2)
pct2 <- round((brand2/sum(brand2)*100),2)
lab2 <- paste(names(brand2),"\n", pct2, "%")
pie(brand2,labels=lab2)
pie(brand1,labels=lab1,
main='전체 사원의 브랜드별 선호도')
# 파이 그래프
pct1 <- round((brand1/sum(brand1)*100),2)
lab1 <- paste(names(brand1),"\n", pct1, "%")
pie(brand1,labels=lab1,
main='전체 사원의 브랜드별 선호도')
pie(brand1,labels=lab1,
main='전체 사원의 브랜드별 선호도')
pie(brand1,labels=lab1,
main='전체 사원의 브랜드별 선호도')
pie(brand1,labels=lab1,
main='전체 사원의 브랜드별 선호도')
pie(brand2,labels=lab2,
main='단골사원의 브랜드별 선호도')
pie(brand1,labels=lab1,
main='전체 사원의 브랜드별 선호도')
pie(brand2,labels=lab2,
main='단골사원의 브랜드별 선호도')
barplot(b1,
main='전체 사원의 브랜드별 선호도')
barplot(b2,
main='단골사원의 브랜드별 선호도')
par(mfrow=c(1,1))
barplot(b2,
main='단골사원의 브랜드별 선호도')
barplot(b1,
main='전체 사원의 브랜드별 선호도')
customer <- customer_meal[c(1,3,6)]
str(customer)
customer2 <- subset(customer,customer$QUANTITY!=1)
num2 <- dcast(customer2,CUSTOMER_ID~BRAND,sum)
num2$sum <- apply(num2[-1],1,sum)
range(num2$sum) #1~641
str(num)
str(num2)
new <- subset(num,num$sum>=100)
str(new)
new <- subset(num2,num2$sum>=100)
str(new)
range(new$sum) #100~641
cusb <- arrange(melt(new[-15],id='CUSTOMER_ID'),CUSTOMER_ID)
head(cusb,20)
new
length(unique(cusb$CUSTOMER_ID))
g <- group_by(cusb,CUSTOMER_ID)
cusmax <- summarise(g,which.max(value))
cusmax <- cusmax$`which.max(value)`
head(cusmax)
length(cusmax)
num <- 1:length(cusmax)
for(i in num){
cusmax[i]<-cusmax[i]+(13*(i-1))
}
brand<-cusb[cusmax,2]
brand<-table(brand)
n <- names(brand)
b <- as.vector(brand)
names(b)<-n
barplot(b)
hist(b,
main='단체 주문자 브랜드별 선호도')
barplot(b,
main='단체 주문자 브랜드별 선호도')
customer2 <- subset(customer,customer$QUANTITY!=1)
customer2 <- subset(customer,customer$QUANTITY!=1)
customer1 <- subset(customer,customer$QUANTITY==1)
num <- dcast(customer1,CUSTOMER_ID~BRAND,sum)
num$sum <- apply(num[-1],1,sum)
range(num$sum) #1~641
str(num)
new <- subset(num,num$sum>=100)
str(new)
range(new$sum) #100~641
cusb <- arrange(melt(new[-15],id='CUSTOMER_ID'),CUSTOMER_ID)
head(cusb,20)
str(cusb)
length(unique(cusb$CUSTOMER_ID))
g <- group_by(cusb,CUSTOMER_ID)
cusmax <- summarise(g,which.max(value))
cusmax <- cusmax$`which.max(value)`
head(cusmax)
length(cusmax)
for(i in num){
cusmax[i]<-cusmax[i]+(13*(i-1))
}
num <- 1:length(cusmax)
for(i in num){
cusmax[i]<-cusmax[i]+(13*(i-1))
}
brand<-cusb[cusmax,2]
brand<-table(brand)
n <- names(brand)
b <- as.vector(brand)
names(b)<-n
barplot(b,
main='개인주문자 브랜드별 선호도')
str(customer_meal)
# 실습파일 가져오기
setwd("C:/IITT/2_Rwork/Part-III")
data <- read.csv("descriptive.csv", header=TRUE)
head(data) # 데이터셋 확인
str(data) # 300x8
# 1. 척도별 기술통계량
#  - 데이터 특성 보기(전체 데이터 대상)
dim(data) # 행(300)과 열(8) 정보 - 차원보기
str(data) # 데이터 구조보기 -> 데이터 종류,행/열,data
str(data$survey)
# 데이터 특성(최소,최대,평균,분위수,노이즈-NA) 제공
summary(data)
#  1)  실습파일 가져오기
setwd("C:/IITT/2_Rwork/Part-III")
data <- read.csv("cleanDescriptive.csv", header=TRUE)
data # 확인
head(data) # 변수 확인
# 2) 변수 추출
x <- data$level2 # 리코딩 변수 이용
y <- data$pass2 # 리코딩 변수 이용
# 3) 데이터프레임 생성
df <- data.frame(Level=x, Pass=y) # 데이터 프레임 생성
# 1) 교차분할표 생성
table(df) # 빈도보기
library(gmodels) # CrossTable() 함수 사용
# 3) diamond의 cut과 color에 대한 교차분할표 생성
library(ggplot2) # diamonds 데이터 셋 사용
str(diamonds)
CrossTable(x=diamonds$color, y=diamonds$cut)
CrossTable(x=df$Level, y=df$Pass)
CrossTable(x=df$Level, y=df$Pass)
head(data) # 변수 확인
weather <- read.csv(file.choose())
str(weather)
str(customer_meal)
names(weather)
c_m_w <- merge(customer_meal,weather,by.customer_meal="SELL_DATE",by.weather="X2018.01.01")
str(c_m_w)
library(stringr)
weather$X2018.01.01 <- str_replace_all(weather$X2018.01.01,'[^0-9]','-')
str(weather)
range(weather$X2018.01.01)
range(customer_meal$SELL_DATE)
customer_meal$SELL_DATE <- as.character(customer_meal$SELL_DATE)
range(customer_meal$SELL_DATE)
weather1<-subset(weather,weather$X2018.01.01<="2019-05-24")
str(weather1)
range(weather1$X2018.01.01)
c_m_w <- merge(customer_meal,weather,by.customer_meal="SELL_DATE",by.weather="X2018.01.01")
c_m_w <- merge(customer_meal,weather,by.x="SELL_DATE",by.y="X2018.01.01")
str(c_m_w)
tail(c_m_w)
c_m_w <- merge(x=customer_meal,y=weather1,by.x="SELL_DATE",by.y="X2018.01.01")
str(c_m_w)
tail(c_m_w)
library(stringr)
length(unique(c_m_w$MENU))
head(sort(table(customer_meal$MENU),decreasing = TRUE),20)
new <- subset(customer_meal$GENDER=='여')
new
new <- subset(customer_meal,customer_meal$GENDER=='여')
names(new$BRAND)
unique(new$BRAND)
new <- subset(new,new$BRAND=='TakeOut')
str(new)
new <- subset(customer_meal,customer_meal$GENDER=='여')
new <- subset(new,new$BRAND=='TakeOut')
str(new)
unique(new$MENU)
customer_train <- read.csv(file.choose())
meal_train <- read.csv(file.choose())
customer_meal <- merge(meal_train,customer_train,by='CUSTOMER_ID')
new <- subset(customer_meal,customer_meal$GENDER=='여')
new <- subset(new,new$BRAND=='TakeOut')
str(new)
str(customer_meal)
table(new$GENDER)
table(new$BRAND)
sort(table(new$MENU),decreasing = TRUE)
head(sort(table(new$MENU),decreasing = TRUE),20)
head(sort(table(new$MENU),decreasing = TRUE),30)
head(sort(table(new$MENU),decreasing = TRUE),20)
take <- head(sort(table(new$MENU),decreasing = TRUE),20)
barplot(take)
barplot(take)
take <- head(sort(table(new$MENU),decreasing = TRUE),15)
barplot(take)
barplot(take,ylim=c(500,9000))
barplot(take)
barplot(take, main='여자사원의 takeout 브랜드에서의 선호도 메뉴')
take <- head(sort(table(new$MENU),decreasing = TRUE),10)
barplot(take, main='여자사원의 takeout 브랜드에서의 선호도 메뉴')
names(customer_meal)
####### 상관관계#############
customer <- customer_meal[-c(1,2)]
cor(customer)
str(customer)
customer$BRAND <- as.numeric(customer$BRAND)
customer$MENU <- as.numeric(customer$MENU)
customer$GENDER <- as.numeric(customer$GENDER)
cor(customer)
names(customer_meal)
source('C:/IITT/2_Rwork/Part-III/새미프로젝트2.R', encoding = 'UTF-8', echo=TRUE)
###### 브랜드별 가격 비교 ###########
customer <- customer_meal[c(3,5)]
g <- group_by(customer,BRAND)
p <- summarise(g,mean(PRICE))
p
sort(p)
order(p)
arrange(p$`mean(PRICE)`)
p <- summarise(g,mean=mean(PRICE))
p
arrange(p,mean)
###### 브랜드별 가격 비교 ###########
customer <- customer_meal[c(3,6)]
g <- group_by(customer,BRAND)
p <- summarise(g,mean=sum(QUANTITY)))
p
###### 브랜드별 가격 비교 ###########
customer <- customer_meal[c(3,6)]
g <- group_by(customer,BRAND)
p <- summarise(g,mean=sum(QUANTITY))
p
p <- summarise(g,sum=sum(QUANTITY))
p
arrange(p,mean)
arrange(p,sum)
# 4 TakeOut       5767
# 5 Western       5797
# 6 우리미각면    6048
# 7 나폴리폴리    6055
# 8 고슬고슬비빈  6094
# 9 싱푸차이나    6105
# 10 가츠엔        6123
# 11 탕맛기픈      6130
# 12 Chef`sCounter 6148
# 13 아시안픽스    6178
arrange(p,desc(sum))
# 4 TakeOut       5767
# 5 Western       5797
# 6 우리미각면    6048
# 7 나폴리폴리    6055
# 8 고슬고슬비빈  6094
# 9 싱푸차이나    6105
# 10 가츠엔        6123
# 11 탕맛기픈      6130
# 12 Chef`sCounter 6148
# 13 아시안픽스    6178
sum <- arrange(p,desc(sum))
mean <- arrange(p,mean)
###### 브랜드별 가격 비교 ###########
customer <- customer_meal[c(3,5)]
g <- group_by(customer,BRAND)
p <- summarise(g,mean=mean(PRICE))
p
mean <- arrange(p,mean)
customer <- customer_meal[c(3,6)]
g <- group_by(customer,BRAND)
p <- summarise(g,sum=sum(QUANTITY))
# 4 TakeOut       5767
# 5 Western       5797
# 6 우리미각면    6048
# 7 나폴리폴리    6055
# 8 고슬고슬비빈  6094
# 9 싱푸차이나    6105
# 10 가츠엔        6123
# 11 탕맛기픈      6130
# 12 Chef`sCounter 6148
# 13 아시안픽스    6178
sum <- arrange(p,desc(sum))
mean;sum
cor(sum$sum,mean$mean)
# 4 TakeOut       5767
# 5 Western       5797
# 6 우리미각면    6048
# 7 나폴리폴리    6055
# 8 고슬고슬비빈  6094
# 9 싱푸차이나    6105
# 10 가츠엔        6123
# 11 탕맛기픈      6130
# 12 Chef`sCounter 6148
# 13 아시안픽스    6178
sum <- arrange(p,sum)
cor(sum$sum,mean$mean) #-0.8776884
product <- read.csv("product.csv", header=TRUE)
head(product) # 친밀도 적절성 만족도(등간척도 - 5점 척도)
# 기술통계량
summary(product) # 요약통계량
sd(product$제품_친밀도); sd(product$제품_적절성); sd(product$제품_만족도)
# 1) 상관계수(coefficient of correlation) : 두 변량 X,Y 사이의 상관관계 정도를 나타내는 수치(계수)
cor(product$제품_친밀도, product$제품_적절성) # 0.4992086 -> 다소 높은 양의 상관관계
# 1) 상관계수(coefficient of correlation) : 두 변량 X,Y 사이의 상관관계 정도를 나타내는 수치(계수)
cor(product$제품_친밀도, product$제품_적절성) # 0.4992086 -> 다소 높은 양의 상관관계
cor(product$제품_친밀도, product$제품_만족도) # 0.467145 -> 다소 높은 양의 상관관계
cor(product$제품_적절성, product$제품_만족도) # 0.7668527
# 전체 변수 간 상관계수 보기
cor(product, method="pearson") # 피어슨 상관계수 - default
library(corrgram)
corrgram(product) # 색상 적용 - 동일 색상으로 그룹화 표시
pricecor <- data.frame(sum$sum,mean$mean)
# 4 TakeOut       5767
# 5 Western       5797
# 6 우리미각면    6048
# 7 나폴리폴리    6055
# 8 고슬고슬비빈  6094
# 9 싱푸차이나    6105
# 10 가츠엔        6123
# 11 탕맛기픈      6130
# 12 Chef`sCounter 6148
# 13 아시안픽스    6178
sum <- arrange(p,desc(sum))
cor(sum$sum,mean$mean) #-0.8776884
pricecor <- data.frame(sum$sum,mean$mean)
corrgram(pricecor)
library(PerformanceAnalytics)
# 상관성,p값(*),정규분포 시각화 - 모수 검정 조건
# 히스토그램 / 산점도 / 상관계수를 다 나타내는 함수
chart.Correlation(product, histogram=, pch="+")
cov2cor(cov(product)) # 공분산 행렬 -> 상관계수 행렬 변환
product <- read.csv("C:/IITT/2_Rwork/Part-IV/product.csv", header=TRUE)
head(product) # 친밀도 적절성 만족도(등간척도 - 5점 척도)
str(product) # 'data.frame':  264 obs. of  3 variables:
y = product$제품_만족도 # 종속변수
x = product$제품_적절성 # 독립변수
df <- data.frame(x, y)
# 회귀모델 생성
# 형식) lm(formula= y ~ x 변수, data)
result.lm <- lm(formula=y ~ x, data=df)
result.lm # 회귀계수
str(pricecor)
pricecor <- data.frame(sum=sum$sum,mean=mean$mean)
str(pricecor)
result.lm <- lm(formula=sum ~ mean, data=pricecor)
result.lm # 회귀계수
test_customer <- read.csv(file.choose())
test_meal <- read.csv(file.choose())
str(test_customer)
test <- merge(test_customer,test_meal,by='CUSTOMER_ID')
str(test)
str(customer_meal)
customer <- test[c(3,5)]
g <- group_by(customer,BRAND)
p <- summarise(g,mean=mean(PRICE))
mean <- arrange(p,mean)
customer <- test[c(3,5)]
g <- group_by(customer,BRAND)
p <- summarise(g,mean=mean(PRICE))
g <- group_by(customer,BRAND)
str(customer)
customer <- test[c(5,7)]
g <- group_by(customer,BRAND)
p <- summarise(g,mean=mean(PRICE))
mean <- arrange(p,mean)
customer <- test[c(5,8)]
g <- group_by(customer,BRAND)
p <- summarise(g,sum=sum(QUANTITY))
sum <- arrange(p,desc(sum))
testpricecor <- data.frame(sum=sum$sum,mean=mean$mean)
str(testpricecor)
str(pricecor)
result.lm <- lm(formula=sum ~ mean, data=pricecor)
result.lm
predict(result.lm, testpricecor$mean)
testpricecor$mean
result.lm$residuals
res <- result.lm$residuals
# (1) 표준화 (scale)
res_scale <- scale(res) #mean=0, sd=1
# (2) mse
mse <- mean(res_scale**2)
mse #0.9901961
shapiro.test(res) #p-value = 1.816e-11
res <- result.lm$residuals
shapiro.test(res) #p-value = 1.816e-11
###
model <- lm(formula=sum ~ mean, data=pricecor)
model
summary(model)
# (5) model 예측치 : test set(x) -> y prediction
y_pred <- predict(model, testpricecor)
y_pred
y_true <- test$Sepal.Length
y_true <- testpricecor$sum
y_pred
y_true
y_pred - y_true
cor(y_true, y_pred)
plot(y_true,col='blue',type='l',label='y true')
points(y_pred,col='red',type='l',label='y pred')
legend('topleft',cex=2,legend=c('y true','y pred'), col=c('blue','red'),pch='--')
plot(y_true,col='blue',type='l',label='y true')
points(y_pred,col='red',type='l',label='y pred')
legend('topleft',cex=1,legend=c('y true','y pred'), col=c('blue','red'),pch='--')
legend('topright',cex=1,legend=c('y true','y pred'), col=c('blue','red'),pch='--')
plot(y_true,col='blue',type='l',label='y true')
points(y_pred,col='red',type='l',label='y pred')
legend('topright',cex=1,legend=c('y true','y pred'), col=c('blue','red'),pch='--')
cor(y_true, y_pred)
